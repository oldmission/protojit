// NOTE: do not try to include the generated header 'reflect.pj.hpp' directly:
// it has a cyclic dependency on 'protojit.hpp'. Just include 'protojit.hpp'
// instead.

language cpp """
  #include "pj/offset_span.hpp"
"""

space pj {

enum Sign external {
  kSigned;
  kUnsigned;
  kSignless;
}

struct Width external {
  bits_: int64;
}

enum ReferenceMode external {
  kPointer;
  kOffset;
}

space reflect {

type Offset = int32;
type Name external = char8[:];
type QualifiedName external = Name[:];

language cpp """
  using Name = offset_span<pj_char>;
  using QualifiedName = offset_span<Name>;
"""

struct Int {
  width: Width;
  alignment: Width;
  sign: Sign;
}

struct Unit {}

struct StructField {
  type: Offset;
  name: Name;
  offset: Width;
}

type StructFields external = StructField[:];
language cpp """
  using StructFields = offset_span<pj::reflect::StructField>;
"""

struct Struct {
  name: QualifiedName;
  fields: StructFields;
  size: Width;
  alignment: Width;
}

enum VectorSplitType {
  kInline;
  kOutline;
}

struct VectorSplit {
  type: VectorSplitType;
  inline_length: uint64;
  path: QualifiedName;
  // TODO: add booleans
  is_default: uint8;
}

variant TermAttribute {
  // TODO: support decoding undef to Undef
  vector_split: VectorSplit;
}

type TermAttributeVector external = TermAttribute[:];
language cpp """
  using TermAttributeVector = offset_span<TermAttribute>;
"""

struct Term {
  name: Name;
  type: Offset;
  tag: uint64;
  attributes: TermAttributeVector;
}

type TermVector external = Term[:];
language cpp """
  using TermVector = offset_span<Term>;
"""

struct InlineVariant {
  name: QualifiedName;
  terms: TermVector;
  default_term: uint64;
  term_offset: Width;
  term_size: Width;
  tag_offset: Width;
  tag_width: Width;
  size: Width;
  alignment: Width;
}

struct OutlineVariant {
  name: QualifiedName;
  terms: TermVector;
  default_term: uint64;
  tag_width: Width;
  tag_alignment: Width;
  term_offset: Width;
  term_alignment: Width;
}

struct Array {
  elem: Offset;
  length: uint64;
  elem_size: Width;
  alignment: Width;
}

struct Vector {
  elem: Offset;
  elem_width: Width;
  min_length: uint64;
  max_length: int64;
  ppl_count: int64;
  length_offset: Width;
  length_size: Width;
  ref_offset: Width;
  ref_size: Width;
  reference_mode: ReferenceMode;
  inline_payload_offset: Width;
  partial_payload_offset: Width;
  size: Width;
  alignment: Width;
}

variant Type {
  Int: Int;
  Unit: Unit;
  Struct: Struct;
  InlineVariant: InlineVariant;
  OutlineVariant: OutlineVariant;
  Array: Array;
  Vector: Vector;
}

type TypeVector external = Type[:];
language cpp """
  using TypeVector = offset_span<Type>;
"""

struct Protocol {
  pj_version: int32;
  head: int32;
  buffer_offset: Width;
  types: TypeVector;
}

protocol Schema : Protocol;

}  // space reflect
}  // space pj
